# Development Dockerfile for VA-Care
FROM node:18-alpine AS frontend-dev

WORKDIR /app/frontend

# Install dependencies
COPY frontend/package.json frontend/yarn.lock* ./
RUN yarn install

# Copy source code
COPY frontend/ ./

# Expose dev server port
EXPOSE 3000

# Start development server with hot reload
CMD ["yarn", "dev"]

# Python backend development stage
FROM python:3.11-slim AS backend-dev

# Install system dependencies for development
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    git \
    curl \
    vim \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app/backend

# Install Python dependencies
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Install development dependencies
RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    black \
    flake8 \
    mypy

# Copy backend source
COPY backend/ ./

# Environment variables for development
ENV PYTHONPATH=/app/backend
ENV PYTHONUNBUFFERED=1
ENV FASTAPI_ENV=development

# Expose backend port
EXPOSE 8000

# Start development server with auto-reload
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Combined development environment
FROM python:3.11-slim AS development

# Install Node.js and system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    git \
    vim \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && corepack enable \
    && corepack prepare yarn@4.0.2 --activate \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install Python dependencies
COPY backend/requirements.txt backend/
RUN pip install --no-cache-dir -r backend/requirements.txt
RUN pip install --no-cache-dir pytest pytest-asyncio black flake8 mypy

# Install Node.js dependencies
# Copy essential yarn files including PnP setup
COPY frontend/package.json frontend/yarn.lock frontend/
COPY frontend/.pnp.cjs frontend/.pnp.loader.mjs frontend/
COPY frontend/.yarn/ frontend/.yarn/
WORKDIR /app/frontend
# Use specific yarn version and install
RUN corepack enable && corepack prepare yarn@4.0.2 --activate && yarn install

# Copy all source code
WORKDIR /app
COPY . .

# Create startup script
RUN echo '#!/bin/bash\n\
cd /app/frontend && yarn dev &\n\
cd /app/backend && uvicorn main:app --host 0.0.0.0 --port 8000 --reload &\n\
wait' > /app/start-dev.sh

RUN chmod +x /app/start-dev.sh

# Expose both ports
EXPOSE 3000 8000

# Environment variables
ENV PYTHONPATH=/app/backend
ENV PYTHONUNBUFFERED=1
ENV NODE_ENV=development

# Start both services
CMD ["/app/start-dev.sh"]